service: crud-serverless-users

provider:
  name: aws
  runtime: nodejs14.x
  iam: 
    role:
      statements:
        - Effect: Allow
          Action: 'dynamodb:*'
          Resource: arn:aws:dynamodb:us-east-1:709239819812:table/usersTable
        - Effect: Allow
          Action: 's3:*'
          Resource: arn:aws:s3:::bucket-serverless-course-1985/*
  environment:
    BUCKET: bucket-serverless-course-1985

#  plugins:
#   - serverless-dynamodb
#   - serverless-offline

package: 
  individually: true
  patterns:
    - "!*/**"
    - "!**"

custom:
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      docker: false
      inMemory: true
      migrate: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true

functions:
  get-users:
    handler: getusers/handler.getUsers
    package: 
      patterns:
        - "getusers/handler.js"
    events:
      - http:
          path: users/{id}
          method: GET
          request:
            parameters:
              paths:
                id: true
  create-users:
    handler: createUsers/handler.createUsers
    package: 
      patterns:
        - "createUsers/handler.js"
    events:
      - http:
          path: users
          method: POST
          request:
            schemas:
              application/json: ${file(schemas/user-schema.json)}
  update-users:
    handler: updateUsers/handler.updateUsers
    package: 
      patterns:
        - "updateUsers/handler.js"
    events:
      - http:
          path: users/{id}
          method: PATCH
          request:
            parameters:
              paths:
                id: true
            schemas:
              application/json: ${file(schemas/user-schema.json)}
  delete-users:
    handler: deleteUsers/handler.deleteUsers
    runtime: python3.8
    package: 
      patterns:
        - "deleteUsers/handler.py"
    events:
      - http:
          path: users/{id}
          method: DELETE
          request:
            parameters:
              paths:
                id: true
  signedURL:
      handler: signedurl/handler.signedS3URL
      package: 
        patterns:
          - "signedurl/handler.js"
      events:
        - http:
            path: signedurl
            method: GET
            request:
              parameters:
                querystrings:
                  filename: true
  thumbGenerator:
    handler: thumbnail/handler.thumbnailGenerator
    layers:
      - { Ref: BaseLambdaLayer }
    package: 
      patterns:
        - "thumbnail/handler.js"
    events:
      - s3:
          bucket: bucket-serverless-course-1985
          event: s3:ObjectCreated:*
          existing: true
          rules:
           - prefix: upload/

layers:
  base:
    name: "prd-dependencies"
    compatibleRuntimes:
      - "nodejs14.x"
    package: 
      artifact: app/nodejs.zip  #se agrega directorio

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    S3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        #AccessControl: PublicRead
        OwnershipControls:
          Rules:
          - ObjectOwnership: ObjectWriter
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
        BucketName: bucket-serverless-course-1985
    SampleBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: Allow
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3Bucket
                  - /*
              Principal: '*'